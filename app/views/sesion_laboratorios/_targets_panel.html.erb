<!-- Panel de objetivos para escenarios de defensa/ataque -->
<div class="bg-white dark:bg-slate-800 shadow rounded-lg p-4">
  <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Máquinas Objetivo</h3>
  
  <% if @sesion.resource_usage.is_a?(Hash) && @sesion.resource_usage['targets'].is_a?(Hash) && @sesion.resource_usage['targets'].any? %>
    <div class="space-y-4">
      <% @sesion.resource_usage['targets'].each do |name, info| %>
        <div class="border border-gray-200 dark:border-gray-700 rounded-md p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition">
          <div class="flex justify-between items-start">
            <div>
              <h4 class="font-semibold text-gray-900 dark:text-white flex items-center">
                <%= name.titleize %>
                <span class="ml-2 px-2 py-0.5 text-xs rounded-full 
                  <%= info['status'] == 'running' ? 'bg-green-100 text-green-800' : 
                     info['status'] == 'paused' ? 'bg-yellow-100 text-yellow-800' : 
                     'bg-red-100 text-red-800' %>">
                  <%= info['status'] || 'desconocido' %>
                </span>
              </h4>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-1"><%= info['description'] %></p>
            </div>
            <div class="flex space-x-2">
              <button type="button" class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-xs px-3 py-1.5" 
                      onclick="connectToTarget('<%= name %>')">
                Conectar
              </button>
              <button type="button" class="text-gray-700 bg-gray-200 hover:bg-gray-300 focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-xs px-3 py-1.5" 
                      onclick="toggleTargetInfo('<%= name %>')">
                Info
              </button>
            </div>
          </div>
          
          <div id="target-info-<%= name %>" class="hidden mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
            <dl class="grid grid-cols-2 gap-2 text-sm">
              <dt class="text-gray-500 dark:text-gray-400">IP:</dt>
              <dd class="text-gray-900 dark:text-gray-300 font-mono"><%= info['ip_address'] || 'No disponible' %></dd>
              
              <dt class="text-gray-500 dark:text-gray-400">Servicios:</dt>
              <dd class="text-gray-900 dark:text-gray-300">
                <% if info['services'].present? %>
                  <div class="flex flex-wrap gap-1 mt-1">
                    <% info['services'].each do |service| %>
                      <span class="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 px-2.5 py-0.5 rounded-full text-xs"><%= service %></span>
                    <% end %>
                  </div>
                <% else %>
                  <span class="text-gray-400">No especificados</span>
                <% end %>
              </dd>
              
              <dt class="text-gray-500 dark:text-gray-400">Dificultad:</dt>
              <dd class="text-gray-900 dark:text-gray-300">
                <% difficulty_color = case info['difficulty']
                  when 'fácil' then 'bg-green-100 text-green-800'
                  when 'intermedio' then 'bg-yellow-100 text-yellow-800'
                  when 'avanzado' then 'bg-red-100 text-red-800'
                  else 'bg-gray-100 text-gray-800'
                  end %>
                <span class="<%= difficulty_color %> px-2 py-0.5 rounded-full text-xs"><%= info['difficulty'] || 'Normal' %></span>
              </dd>
              
              <% if info['flags'].present? %>
                <dt class="text-gray-500 dark:text-gray-400">Flags:</dt>
                <dd class="text-gray-900 dark:text-gray-300"><%= info['flags'] %></dd>
              <% end %>
            </dl>
            
            <!-- Acciones específicas para el target -->
            <div class="mt-3 flex items-center space-x-2">
              <button type="button" class="text-white bg-indigo-600 hover:bg-indigo-700 focus:ring-4 focus:ring-indigo-300 font-medium rounded-lg text-xs px-3 py-1.5" 
                      onclick="scanTarget('<%= name %>', '<%= info['ip_address'] %>')">
                Escanear
              </button>
              <% if info['services'].try(:include?, 'http') %>
                <button type="button" class="text-white bg-purple-600 hover:bg-purple-700 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-xs px-3 py-1.5"
                        onclick="window.open('http://<%= info['ip_address'] %>:80', '_blank')">
                  Abrir Web
                </button>
              <% end %>
              <button type="button" class="text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-xs px-3 py-1.5"
                      onclick="restartTarget('<%= name %>')">
                Reiniciar
              </button>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    
    <!-- Terminal para interactuar con los objetivos -->
    <div id="target-terminal-container" class="hidden mt-4 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
      <div class="bg-gray-800 text-white px-3 py-2 flex justify-between items-center text-sm">
        <div id="target-terminal-header">Conectado a: <span class="font-medium" id="target-name">N/A</span></div>
        <button type="button" class="text-gray-400 hover:text-white" onclick="closeTargetTerminal()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div id="target-terminal-output" class="bg-black text-green-400 font-mono text-sm p-2 h-48 overflow-y-auto"></div>
      <div class="flex border-t border-gray-700">
        <input type="text" id="target-command-input" class="flex-1 bg-gray-900 text-white font-mono border-0 focus:ring-0 px-2 py-1" placeholder="Ingrese comando...">
        <button type="button" class="bg-blue-600 text-white px-3 py-1" id="target-execute-button">Ejecutar</button>
      </div>
    </div>
    
  <% elsif @sesion.laboratorio.tipo.in?(['atacante', 'defensor', 'ctf_ofensivo', 'red_corporativa']) %>
    <div class="text-center py-6">
      <div class="mx-auto h-12 w-12 text-gray-400">
        <svg class="h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
        </svg>
      </div>
      <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No hay máquinas objetivo</h3>
      <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Este entorno puede utilizar objetivos pero no hay ninguno desplegado actualmente.</p>
      <div class="mt-4">
        <button type="button" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                onclick="deployTarget()">
          <svg class="mr-2 -ml-1 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Desplegar máquina objetivo
        </button>
      </div>
    </div>
  <% else %>
    <div class="text-center py-6">
      <p class="text-sm text-gray-500 dark:text-gray-400">Este tipo de laboratorio no utiliza máquinas objetivo.</p>
    </div>
  <% end %>
</div>

<!-- Modal para seleccionar tipo de objetivo -->
<div id="target-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center z-50">
  <div class="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all max-w-md w-full p-6">
    <div class="flex justify-between items-center pb-3 border-b border-gray-200 dark:border-gray-700">
      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Seleccionar tipo de máquina</h3>
      <button type="button" class="text-gray-400 hover:text-gray-500" onclick="closeTargetModal()">
        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="py-4">
      <div class="space-y-3">
        <!-- Máquinas vulnerables -->
        <p class="text-sm font-medium text-gray-700 dark:text-gray-300">Máquinas vulnerables:</p>
        <div class="grid grid-cols-1 gap-2">
          <button type="button" class="text-left px-4 py-2 rounded-md border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700"
                  onclick="selectTargetType('metasploitable')">
            <span class="block font-medium">Metasploitable</span>
            <span class="block text-sm text-gray-500 dark:text-gray-400">Máquina Linux con múltiples vulnerabilidades</span>
          </button>
          <button type="button" class="text-left px-4 py-2 rounded-md border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700"
                  onclick="selectTargetType('dvwa')">
            <span class="block font-medium">DVWA</span>
            <span class="block text-sm text-gray-500 dark:text-gray-400">Aplicación web con vulnerabilidades deliberadas</span>
          </button>
        </div>
        
        <!-- Máquinas para defensa -->
        <p class="text-sm font-medium text-gray-700 dark:text-gray-300 mt-4">Máquinas para defensa:</p>
        <div class="grid grid-cols-1 gap-2">
          <button type="button" class="text-left px-4 py-2 rounded-md border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700"
                  onclick="selectTargetType('secure_ubuntu')">
            <span class="block font-medium">Ubuntu Hardened</span>
            <span class="block text-sm text-gray-500 dark:text-gray-400">Ubuntu con configuración robusta para defensa</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Funciones para manejar los objetivos
  function toggleTargetInfo(name) {
    const infoElement = document.getElementById(`target-info-${name}`);
    infoElement.classList.toggle('hidden');
  }
  
  function connectToTarget(name) {
    // Mostrar el terminal y configurar el nombre del objetivo
    document.getElementById('target-terminal-container').classList.remove('hidden');
    document.getElementById('target-name').textContent = name;
    document.getElementById('target-terminal-output').innerHTML = `<div>Conectado a ${name}...</div>`;
    
    // Configurar el input y botón para enviar comandos a este objetivo
    const commandInput = document.getElementById('target-command-input');
    const executeButton = document.getElementById('target-execute-button');
    
    commandInput.focus();
    
    // Limpiar eventos anteriores
    commandInput.onkeydown = null;
    executeButton.onclick = null;
    
    // Configurar nuevos manejadores de eventos
    commandInput.onkeydown = function(e) {
      if (e.key === 'Enter') {
        executeTargetCommand(name);
      }
    };
    
    executeButton.onclick = function() {
      executeTargetCommand(name);
    };
  }
  
  function executeTargetCommand(name) {
    const commandInput = document.getElementById('target-command-input');
    const command = commandInput.value.trim();
    
    if (!command) return;
    
    // Mostrar el comando en el terminal
    const outputElement = document.getElementById('target-terminal-output');
    outputElement.innerHTML += `<div class="text-white">$ ${command}</div>`;
    
    // Limpiar el input
    commandInput.value = '';
    
    // Enviar comando al servidor
    fetch(`/api/terminal/execute_on_target`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        session_id: '<%= @sesion.id %>',
        target_name: name,
        command: command
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        outputElement.innerHTML += `<div>${data.output}</div>`;
      } else {
        outputElement.innerHTML += `<div class="text-red-500">Error: ${data.output || 'No se pudo ejecutar el comando'}</div>`;
      }
      // Scroll al fondo
      outputElement.scrollTop = outputElement.scrollHeight;
    })
    .catch(error => {
      outputElement.innerHTML += `<div class="text-red-500">Error de conexión: ${error.message}</div>`;
      outputElement.scrollTop = outputElement.scrollHeight;
    });
  }
  
  function closeTargetTerminal() {
    document.getElementById('target-terminal-container').classList.add('hidden');
  }
  
  function scanTarget(name, ip) {
    if (!ip) {
      alert('Dirección IP no disponible para este objetivo');
      return;
    }
    
    connectToTarget(name);
    const outputElement = document.getElementById('target-terminal-output');
    outputElement.innerHTML = `<div>Escaneando ${name} (${ip})...</div>`;
    
    // Ejecutar nmap en el contenedor principal
    fetch(`/api/terminal/command`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        session_id: '<%= @sesion.id %>',
        command: `nmap -sV ${ip}`
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        outputElement.innerHTML += `<div>${data.output}</div>`;
      } else {
        outputElement.innerHTML += `<div class="text-red-500">Error: ${data.output || 'No se pudo ejecutar el escaneo'}</div>`;
      }
      outputElement.scrollTop = outputElement.scrollHeight;
    });
  }
  
  function restartTarget(name) {
    if (!confirm(`¿Estás seguro que deseas reiniciar la máquina ${name}?`)) return;
    
    fetch(`/api/terminal/restart_target`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        session_id: '<%= @sesion.id %>',
        target_name: name
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert(`Máquina ${name} reiniciada correctamente`);
        // Recargar la página para actualizar el estado
        window.location.reload();
      } else {
        alert(`Error al reiniciar máquina ${name}: ${data.error}`);
      }
    });
  }
  
  function deployTarget() {
    document.getElementById('target-modal').classList.remove('hidden');
  }
  
  function closeTargetModal() {
    document.getElementById('target-modal').classList.add('hidden');
  }
  
  function selectTargetType(targetType) {
    fetch(`/api/terminal/deploy_target`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        session_id: '<%= @sesion.id %>',
        target_type: targetType
      })
    })
    .then(response => response.json())
    .then(data => {
      closeTargetModal();
      if (data.success) {
        alert(`Máquina objetivo ${targetType} desplegada correctamente`);
        // Recargar la página para mostrar el nuevo objetivo
        window.location.reload();
      } else {
        alert(`Error al desplegar máquina objetivo: ${data.error}`);
      }
    });
  }
</script>